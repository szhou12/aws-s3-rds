from datetime import datetime
import uuid
from typing import Optional
from pydantic import BaseModel
from sqlmodel import SQLModel, Field


# ====== Models ======
class FileInfo(BaseModel):
    id: str
    key: str  # s3_key
    size: float
    date_added: str
    sourcename: str
    filename: str
    author: str
    language: str
    file_type: str
    status: int

class FileListResponse(BaseModel):
    success: bool
    files: list[FileInfo] = []
    error: Optional[str] = None


class Upload(SQLModel, table=True):
    id: str = Field(primary_key=True)
    filename: str
    author: str
    language: str
    date_added: datetime = Field(default_factory=lambda: datetime.now()) # auto-generated by Python
    size: int  # in bytes
    file_type: str
    source_filename: str
    pages: int
    status: int
    s3_key: str